<?xml version="1.0" encoding="utf-8"?>
<!-- =================================================================================== -->
<!-- |    This document was autogenerated by xacro from /home/nyuad/NYUAD-ROV-Capstone-Repo/src/bluerov2_sim/bluerov2_description/robots/default.xacro | -->
<!-- |    EDITING THIS FILE BY HAND IS NOT RECOMMENDED                                 | -->
<!-- =================================================================================== -->

<robot name="bluerov2">
  <!-- Some pretty colors -->
  <material name="blue">
    <color rgba="0.0 0.0 0.8 1.0"/>
  </material>
  <material name="green">
    <color rgba="0.0 0.8 0.0 1.0"/>
  </material>
  <material name="grey">
    <color rgba="0.7 0.7 0.7 1.0"/>
  </material>
  <material name="grey2">
    <color rgba="0.9 0.9 0.9 1.0"/>
  </material>
  <material name="red">
    <color rgba="0.8 0.0 0.0 1.0"/>
  </material>
  <material name="orange">
    <color rgba="1.0 0.5 0.0 1.0"/>
  </material>
  <material name="white">
    <color rgba="1.0 1.0 1.0 1.0"/>
  </material>
  <material name="black">
    <color rgba="0.05 0.05 0.05 1.0"/>
  </material>
  <!-- MACRO FOR THRUSTER UNITS  -->
  <!-- ROTOR DYNAMICS MACROS -->
  <!-- First order dynamics -->
  <!--
    MACROS FOR CONVERSION FUNCTIONS BETWEEN ROTOR'S ANG. VELOCITY AND
    THRUSTER FORCE
  -->
  <!-- THRUSTER MODULE MACROS  -->
  <!--
    Thruster model with first order dynamic model for the rotor dynamics
    and a proportional non-linear steady-state conversion from the rotor's
    angular velocity to output thrust force
  -->
    
  
  <!-- Rigid body description of the base link -->

  <link name="base_link">
    <!--
          Be careful to setup the coefficients for the inertial tensor,
          otherwise your model will become unstable on Gazebo
        -->
    <inertial>
      <mass value="11.2"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <!-- <inertia ixx="525.39" ixy="1.44" ixz="33.41" iyy="794.20" iyz="2.6" izz="691.23"/> -->
      <inertia ixx="0.303754294144" ixy="0.0" ixz="0.0" iyy="0.626021839744" iyz="0.0" izz="0.5768863744"/>
    </inertial>
    <!-- This visual geometry representation can be used when running
             tasks in which you need Gazebo to start quickly
        -->
    <!-- <xacro:if value="${use_simplified_mesh}"> -->
    <!-- Code in rexrov2_base.xacro if use the flag use_simplified_mesh -->
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="file:///home/nyuad/NYUAD-ROV-Capstone-Repo/src/bluerov2_sim/bluerov2_description/meshes/bluerov2_noprop.dae" scale="1 1 1"/>
      </geometry>
    </visual>
    <!-- In rexrov2_base they made collision planes to minize the GPU load -->
    <collision>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="file:///home/nyuad/NYUAD-ROV-Capstone-Repo/src/bluerov2_sim/bluerov2_description/meshes/bluerov2_noprop.stl" scale="1 1 1"/>
      </geometry>
    </collision>
  </link>
  <gazebo reference="base_link">
    <selfCollide>false</selfCollide>
    <!-- IMU SITL SENSOR -->
    <sensor name="imu_sensor" type="imu">
      <pose>0 0 0 0 0 0</pose>
      <always_on>true</always_on>
      <update_rate>1000.0</update_rate>
    </sensor>
  </gazebo>
  <!-- Set up hydrodynamic plugin given as input parameter -->
  <gazebo>
    <plugin filename="libuuv_underwater_object_ros_plugin.so" name="uuv_plugin">
      <fluid_density>1028.0</fluid_density>
      <flow_velocity_topic>hydrodynamics/current_velocity</flow_velocity_topic>
      <debug>0</debug>
      <!-- List of hydrodynamic models this robot's links -->
      <link name="base_link">
        <!-- This flag will make the link neutrally buoyant -->
        <neutrally_buoyant>0</neutrally_buoyant>
        <!-- Link's volume -->
        <volume>0.011054</volume>
        <!-- Link's bounding box, it is used to recalculate the immersed
        volume when close to the surface.
        This is a workaround the invalid bounding box given by Gazebo-->
        <box>
          <width>0.448</width>
          <length>0.2384</length>
          <height>0.28066</height>
        </box>
        <!-- Center of buoyancy -->
        <center_of_buoyancy>0 0 0.3872</center_of_buoyancy>
        <!-- Fossen's equation of motion for underwater vehicles
      Reference:
          [1] Fossen, Thor I. Handbook of marine craft hydrodynamics and motion
          control. John Wiley & Sons, 2011.
     -->
        <hydrodynamic_model>
          <type>fossen</type>
          <!-- Added mass: see p.28 in Berg2012 -->
          <added_mass>
            1.7182 0 0 0 0 0
            0 0 0 0 0 0
            0 0 5.468 0 0 0
            0 0 0 0 0 0
            0 0 0 0 1.2481 0
            0 0 0 0 0 0.4006
          </added_mass>
          <!--
            The linear damping coefficients can be provided as a diagonal (6 elements)
            or a full matrix (36 coefficients), like the added-mass coefficients above
            Linear damping: see p.31 in Berg2012
          -->
          <linear_damping>
            -11.7391 -20 -31.8678 -25 -44.9085 -5
          </linear_damping>
          <!--
            The linear damping coefficients proportional to the forward speed
            can be provided as a diagonal (6 elements) or a full matrix (36 coefficients),
            like the added-mass coefficients above.
            This matrix is mostly useful for slender bodies (e.g. AUVs with torpedo shape)
          -->
          <!-- <linear_damping_forward_speed>
            0 0 0 0 0 0
          </linear_damping_forward_speed> -->
          <!--
            The quadratic damping coefficients can be provided as a diagonal (6 elements)
            or a full matrix (36 coefficients), like the added-mass coefficients above
            Non-linear damping: see p.30 in Berg2012
          -->
          <quadratic_damping>
            0 0 0 0 0 0
          </quadratic_damping>
          <!--
            In case you want to model a simple surface vessel, you can use the
            implementation of linear (small angle) theory for boxed shaped vessels
            by providing the following parameters. If you omit the area of the
            water level plane area, it will be calculated from the bounding box
            parameters. Uncomment the lines below in case you are simulating a
            surface vessel.
            For more details on these parameters and the computation of buoyancy
            for vessels using this theory, check:
              [1] Lecture Notes  TTK 4190 Guidance and Control of Vehicles (T. I. Fossen)
                  http://www.fossen.biz/wiley/Ch4.pdf
              [2] Fossen, Thor I. Handbook of marine craft hydrodynamics and motion
                  control. John Wiley & Sons, 2011.
          -->
          <!--
          <metacentric_width>0.0</metacentric_width>
          <metacentric_length>0.0</metacentric_length>
          <water_level_plane_area>0.0</water_level_plane_area>
          -->
        </hydrodynamic_model>
      </link>
      <!--
          In case other modules are added to the vehicle (such as a manipulator)
          that also have link running with the underwater object plugin, they
          should also be added in this block. For this, this new module should
          have a file similar to gazebo.xacro above with the description of the
          parameter necessary for the underwater object plugin to be initialized.
        -->
    </plugin>
  </gazebo>
  <!-- Adding the thruster units with the macro created in snippets.xacro -->
  <!--
    Important:
    - The thruster IDs must be given as integers and must be unique to each thruster unit
    - The thruster pose in the <origin> block is relative to the body's center of mass. Be
    aware that Gazebo does not use the SNAME convention per default.
  -->
  <!--
    Dummy link as place holder for the thruster frame,
    since thrusters can often be inside the collision geometry
    of the vehicle and may cause internal collisions if set otherwise
    -->
  <link name="bluerov2/thruster_0">
    <visual>
      <geometry>
        <mesh filename="file:///home/nyuad/NYUAD-ROV-Capstone-Repo/src/bluerov2_sim/bluerov2_description/meshes/bluerov2_propcw.dae" scale="1 1 1"/>
      </geometry>
    </visual>
    <inertial>
      <mass value="0.010"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertia ixx="0.000000017" ixy="0.0" ixz="0.0" iyy="0.000000017" iyz="0.0" izz="0.000000017"/>
    </inertial>
  </link>
  <!-- Joint between thruster link and vehicle base link -->
  <joint name="bluerov2/thruster_0_joint" type="continuous">
    <origin rpy="0 0 0.7853981634" xyz="0.1355 -0.1 -0.0725"/>
    <axis xyz="1 0 0"/>
    <parent link="base_link"/>
    <child link="bluerov2/thruster_0"/>
  </joint>
  <!-- From desistek underwater vehicle -->
  <gazebo>
    <!-- Thruster ROS plugin -->
    <plugin filename="libuuv_thruster_ros_plugin.so" name="bluerov2_0_thruster_model">
      <!-- Name of the thruster link -->
      <linkName>bluerov2/thruster_0</linkName>
      <!-- Name of the joint between thruster and vehicle base link -->
      <jointName>bluerov2/thruster_0_joint</jointName>
      <!-- Make the thruster aware of its id -->
      <thrusterID>0</thrusterID>
      <!-- Gain of the input command signal -->
      <gain>1</gain>
      <!-- Maximum allowed input value for the input signal for thruster unit -->
      <!-- <clampMax>0</clampMax> -->
      <!-- Minimum allowed value for the input signal for thruster unit -->
      <!-- <clampMin>0</clampMin> -->
      <!-- Minimum and maximum thrust force output allowed -->
      <!-- <thrustMin>0</thrustMin> -->
      <!-- <thrustMax>200</thrustMax> -->
      <!--
       Value from 0 to 1 to set the efficiency of the output thrust force
       Default value is 1.0
       -->
      <thrust_efficiency>1</thrust_efficiency>
      <!--
       Value from 0 to 1 to set the efficiency of the propeller as a factor
       to be multiplied to the current value of the state variable at each
       iteration.
       Default value is 1.0
       -->
      <propeller_efficiency>1</propeller_efficiency>
      <!-- 2) First order model -->
      <dynamics>
        <type>FirstOrder</type>
        <timeConstant>0.2</timeConstant>
      </dynamics>
      <conversion>
        <type>Basic</type>
        <rotorConstant>0.0001</rotorConstant>
        <!-- <rotorConstant>0</rotorConstant> -->
      </conversion>
    </plugin>
  </gazebo>
  <gazebo reference="bluerov2/thruster_0">
    <selfCollide>false</selfCollide>
  </gazebo>
  <link name="bluerov2/thruster_sitl_0">
    <inertial>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <mass value="0.0001"/>
      <inertia ixx="0.00000002" ixy="0.0" ixz="0.0" iyy="0.00000002" iyz="0.0" izz="0.00000002"/>
    </inertial>
  </link>
  <joint name="bluerov2/thruster_sitl_0_joint" type="revolute">
    <origin rpy="1.5707963 1.5707963 -0.78539815" xyz="0.1355 -0.1 -0.0725"/>
    <axis xyz="1 0 0"/>
    <limit effort="0.0" lower="0.0" upper="0.0" velocity="0.0"/>
    <parent link="base_link"/>
    <child link="bluerov2/thruster_sitl_0"/>
  </joint>
  <gazebo reference="bluerov2/thruster_sitl_0">
    <selfCollide>false</selfCollide>
  </gazebo>
  <!--
    Dummy link as place holder for the thruster frame,
    since thrusters can often be inside the collision geometry
    of the vehicle and may cause internal collisions if set otherwise
    -->
  <link name="bluerov2/thruster_1">
    <visual>
      <geometry>
        <mesh filename="file:///home/nyuad/NYUAD-ROV-Capstone-Repo/src/bluerov2_sim/bluerov2_description/meshes/bluerov2_propcw.dae" scale="1 1 1"/>
      </geometry>
    </visual>
    <inertial>
      <mass value="0.010"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertia ixx="0.000000017" ixy="0.0" ixz="0.0" iyy="0.000000017" iyz="0.0" izz="0.000000017"/>
    </inertial>
  </link>
  <!-- Joint between thruster link and vehicle base link -->
  <joint name="bluerov2/thruster_1_joint" type="continuous">
    <origin rpy="0 0 -0.7853981634" xyz="0.1355 0.1 -0.0725"/>
    <axis xyz="1 0 0"/>
    <parent link="base_link"/>
    <child link="bluerov2/thruster_1"/>
  </joint>
  <!-- From desistek underwater vehicle -->
  <gazebo>
    <!-- Thruster ROS plugin -->
    <plugin filename="libuuv_thruster_ros_plugin.so" name="bluerov2_1_thruster_model">
      <!-- Name of the thruster link -->
      <linkName>bluerov2/thruster_1</linkName>
      <!-- Name of the joint between thruster and vehicle base link -->
      <jointName>bluerov2/thruster_1_joint</jointName>
      <!-- Make the thruster aware of its id -->
      <thrusterID>1</thrusterID>
      <!-- Gain of the input command signal -->
      <gain>1</gain>
      <!-- Maximum allowed input value for the input signal for thruster unit -->
      <!-- <clampMax>0</clampMax> -->
      <!-- Minimum allowed value for the input signal for thruster unit -->
      <!-- <clampMin>0</clampMin> -->
      <!-- Minimum and maximum thrust force output allowed -->
      <!-- <thrustMin>0</thrustMin> -->
      <!-- <thrustMax>200</thrustMax> -->
      <!--
       Value from 0 to 1 to set the efficiency of the output thrust force
       Default value is 1.0
       -->
      <thrust_efficiency>1</thrust_efficiency>
      <!--
       Value from 0 to 1 to set the efficiency of the propeller as a factor
       to be multiplied to the current value of the state variable at each
       iteration.
       Default value is 1.0
       -->
      <propeller_efficiency>1</propeller_efficiency>
      <!-- 2) First order model -->
      <dynamics>
        <type>FirstOrder</type>
        <timeConstant>0.2</timeConstant>
      </dynamics>
      <conversion>
        <type>Basic</type>
        <rotorConstant>0.0001</rotorConstant>
        <!-- <rotorConstant>0</rotorConstant> -->
      </conversion>
    </plugin>
  </gazebo>
  <gazebo reference="bluerov2/thruster_1">
    <selfCollide>false</selfCollide>
  </gazebo>
  <link name="bluerov2/thruster_sitl_1">
    <inertial>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <mass value="0.0001"/>
      <inertia ixx="0.00000002" ixy="0.0" ixz="0.0" iyy="0.00000002" iyz="0.0" izz="0.00000002"/>
    </inertial>
  </link>
  <joint name="bluerov2/thruster_sitl_1_joint" type="revolute">
    <origin rpy="1.5707963 1.5707963 3.92699075" xyz="0.1355 0.1 -0.0725"/>
    <axis xyz="1 0 0"/>
    <limit effort="0.0" lower="0.0" upper="0.0" velocity="0.0"/>
    <parent link="base_link"/>
    <child link="bluerov2/thruster_sitl_1"/>
  </joint>
  <gazebo reference="bluerov2/thruster_sitl_1">
    <selfCollide>false</selfCollide>
  </gazebo>
  <!--
    Dummy link as place holder for the thruster frame,
    since thrusters can often be inside the collision geometry
    of the vehicle and may cause internal collisions if set otherwise
    -->
  <link name="bluerov2/thruster_2">
    <visual>
      <geometry>
        <mesh filename="file:///home/nyuad/NYUAD-ROV-Capstone-Repo/src/bluerov2_sim/bluerov2_description/meshes/bluerov2_propcw.dae" scale="1 1 1"/>
      </geometry>
    </visual>
    <inertial>
      <mass value="0.010"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertia ixx="0.000000017" ixy="0.0" ixz="0.0" iyy="0.000000017" iyz="0.0" izz="0.000000017"/>
    </inertial>
  </link>
  <!-- Joint between thruster link and vehicle base link -->
  <joint name="bluerov2/thruster_2_joint" type="continuous">
    <origin rpy="0 0 2.3561944902" xyz="-0.1475 -0.1 -0.0725"/>
    <axis xyz="1 0 0"/>
    <parent link="base_link"/>
    <child link="bluerov2/thruster_2"/>
  </joint>
  <!-- From desistek underwater vehicle -->
  <gazebo>
    <!-- Thruster ROS plugin -->
    <plugin filename="libuuv_thruster_ros_plugin.so" name="bluerov2_2_thruster_model">
      <!-- Name of the thruster link -->
      <linkName>bluerov2/thruster_2</linkName>
      <!-- Name of the joint between thruster and vehicle base link -->
      <jointName>bluerov2/thruster_2_joint</jointName>
      <!-- Make the thruster aware of its id -->
      <thrusterID>2</thrusterID>
      <!-- Gain of the input command signal -->
      <gain>1</gain>
      <!-- Maximum allowed input value for the input signal for thruster unit -->
      <!-- <clampMax>0</clampMax> -->
      <!-- Minimum allowed value for the input signal for thruster unit -->
      <!-- <clampMin>0</clampMin> -->
      <!-- Minimum and maximum thrust force output allowed -->
      <!-- <thrustMin>0</thrustMin> -->
      <!-- <thrustMax>200</thrustMax> -->
      <!--
       Value from 0 to 1 to set the efficiency of the output thrust force
       Default value is 1.0
       -->
      <thrust_efficiency>1</thrust_efficiency>
      <!--
       Value from 0 to 1 to set the efficiency of the propeller as a factor
       to be multiplied to the current value of the state variable at each
       iteration.
       Default value is 1.0
       -->
      <propeller_efficiency>1</propeller_efficiency>
      <!-- 2) First order model -->
      <dynamics>
        <type>FirstOrder</type>
        <timeConstant>0.2</timeConstant>
      </dynamics>
      <conversion>
        <type>Basic</type>
        <rotorConstant>0.0001</rotorConstant>
        <!-- <rotorConstant>0</rotorConstant> -->
      </conversion>
    </plugin>
  </gazebo>
  <gazebo reference="bluerov2/thruster_2">
    <selfCollide>false</selfCollide>
  </gazebo>
  <link name="bluerov2/thruster_sitl_2">
    <inertial>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <mass value="0.0001"/>
      <inertia ixx="0.00000002" ixy="0.0" ixz="0.0" iyy="0.00000002" iyz="0.0" izz="0.00000002"/>
    </inertial>
  </link>
  <joint name="bluerov2/thruster_sitl_2_joint" type="revolute">
    <origin rpy="1.5707963 1.5707963 0.78540075" xyz="-0.1475 -0.1 -0.0725"/>
    <axis xyz="1 0 0"/>
    <limit effort="0.0" lower="0.0" upper="0.0" velocity="0.0"/>
    <parent link="base_link"/>
    <child link="bluerov2/thruster_sitl_2"/>
  </joint>
  <gazebo reference="bluerov2/thruster_sitl_2">
    <selfCollide>false</selfCollide>
  </gazebo>
  <!--
    Dummy link as place holder for the thruster frame,
    since thrusters can often be inside the collision geometry
    of the vehicle and may cause internal collisions if set otherwise
    -->
  <link name="bluerov2/thruster_3">
    <visual>
      <geometry>
        <mesh filename="file:///home/nyuad/NYUAD-ROV-Capstone-Repo/src/bluerov2_sim/bluerov2_description/meshes/bluerov2_propcw.dae" scale="1 1 1"/>
      </geometry>
    </visual>
    <inertial>
      <mass value="0.010"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertia ixx="0.000000017" ixy="0.0" ixz="0.0" iyy="0.000000017" iyz="0.0" izz="0.000000017"/>
    </inertial>
  </link>
  <!-- Joint between thruster link and vehicle base link -->
  <joint name="bluerov2/thruster_3_joint" type="continuous">
    <origin rpy="0 0 -2.3561944902" xyz="-0.1475 0.1 -0.0725"/>
    <axis xyz="1 0 0"/>
    <parent link="base_link"/>
    <child link="bluerov2/thruster_3"/>
  </joint>
  <!-- From desistek underwater vehicle -->
  <gazebo>
    <!-- Thruster ROS plugin -->
    <plugin filename="libuuv_thruster_ros_plugin.so" name="bluerov2_3_thruster_model">
      <!-- Name of the thruster link -->
      <linkName>bluerov2/thruster_3</linkName>
      <!-- Name of the joint between thruster and vehicle base link -->
      <jointName>bluerov2/thruster_3_joint</jointName>
      <!-- Make the thruster aware of its id -->
      <thrusterID>3</thrusterID>
      <!-- Gain of the input command signal -->
      <gain>1</gain>
      <!-- Maximum allowed input value for the input signal for thruster unit -->
      <!-- <clampMax>0</clampMax> -->
      <!-- Minimum allowed value for the input signal for thruster unit -->
      <!-- <clampMin>0</clampMin> -->
      <!-- Minimum and maximum thrust force output allowed -->
      <!-- <thrustMin>0</thrustMin> -->
      <!-- <thrustMax>200</thrustMax> -->
      <!--
       Value from 0 to 1 to set the efficiency of the output thrust force
       Default value is 1.0
       -->
      <thrust_efficiency>1</thrust_efficiency>
      <!--
       Value from 0 to 1 to set the efficiency of the propeller as a factor
       to be multiplied to the current value of the state variable at each
       iteration.
       Default value is 1.0
       -->
      <propeller_efficiency>1</propeller_efficiency>
      <!-- 2) First order model -->
      <dynamics>
        <type>FirstOrder</type>
        <timeConstant>0.2</timeConstant>
      </dynamics>
      <conversion>
        <type>Basic</type>
        <rotorConstant>0.0001</rotorConstant>
        <!-- <rotorConstant>0</rotorConstant> -->
      </conversion>
    </plugin>
  </gazebo>
  <gazebo reference="bluerov2/thruster_3">
    <selfCollide>false</selfCollide>
  </gazebo>
  <link name="bluerov2/thruster_sitl_3">
    <inertial>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <mass value="0.0001"/>
      <inertia ixx="0.00000002" ixy="0.0" ixz="0.0" iyy="0.00000002" iyz="0.0" izz="0.00000002"/>
    </inertial>
  </link>
  <joint name="bluerov2/thruster_sitl_3_joint" type="revolute">
    <origin rpy="1.5707963 1.5707963 2.35619445" xyz="-0.1475 0.1 -0.0725"/>
    <axis xyz="1 0 0"/>
    <limit effort="0.0" lower="0.0" upper="0.0" velocity="0.0"/>
    <parent link="base_link"/>
    <child link="bluerov2/thruster_sitl_3"/>
  </joint>
  <gazebo reference="bluerov2/thruster_sitl_3">
    <selfCollide>false</selfCollide>
  </gazebo>
  <!--
    Dummy link as place holder for the thruster frame,
    since thrusters can often be inside the collision geometry
    of the vehicle and may cause internal collisions if set otherwise
    -->
  <link name="bluerov2/thruster_4">
    <visual>
      <geometry>
        <mesh filename="file:///home/nyuad/NYUAD-ROV-Capstone-Repo/src/bluerov2_sim/bluerov2_description/meshes/bluerov2_propcw.dae" scale="1 1 1"/>
      </geometry>
    </visual>
    <inertial>
      <mass value="0.010"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertia ixx="0.000000017" ixy="0.0" ixz="0.0" iyy="0.000000017" iyz="0.0" izz="0.000000017"/>
    </inertial>
  </link>
  <!-- Joint between thruster link and vehicle base link -->
  <joint name="bluerov2/thruster_4_joint" type="continuous">
    <origin rpy="0 -1.5707963268 0" xyz="0.0025 -0.1105 -0.005"/>
    <axis xyz="1 0 0"/>
    <parent link="base_link"/>
    <child link="bluerov2/thruster_4"/>
  </joint>
  <!-- From desistek underwater vehicle -->
  <gazebo>
    <!-- Thruster ROS plugin -->
    <plugin filename="libuuv_thruster_ros_plugin.so" name="bluerov2_4_thruster_model">
      <!-- Name of the thruster link -->
      <linkName>bluerov2/thruster_4</linkName>
      <!-- Name of the joint between thruster and vehicle base link -->
      <jointName>bluerov2/thruster_4_joint</jointName>
      <!-- Make the thruster aware of its id -->
      <thrusterID>4</thrusterID>
      <!-- Gain of the input command signal -->
      <gain>1</gain>
      <!-- Maximum allowed input value for the input signal for thruster unit -->
      <!-- <clampMax>0</clampMax> -->
      <!-- Minimum allowed value for the input signal for thruster unit -->
      <!-- <clampMin>0</clampMin> -->
      <!-- Minimum and maximum thrust force output allowed -->
      <!-- <thrustMin>0</thrustMin> -->
      <!-- <thrustMax>200</thrustMax> -->
      <!--
       Value from 0 to 1 to set the efficiency of the output thrust force
       Default value is 1.0
       -->
      <thrust_efficiency>1</thrust_efficiency>
      <!--
       Value from 0 to 1 to set the efficiency of the propeller as a factor
       to be multiplied to the current value of the state variable at each
       iteration.
       Default value is 1.0
       -->
      <propeller_efficiency>1</propeller_efficiency>
      <!-- 2) First order model -->
      <dynamics>
        <type>FirstOrder</type>
        <timeConstant>0.2</timeConstant>
      </dynamics>
      <conversion>
        <type>Basic</type>
        <rotorConstant>0.0001</rotorConstant>
        <!-- <rotorConstant>0</rotorConstant> -->
      </conversion>
    </plugin>
  </gazebo>
  <gazebo reference="bluerov2/thruster_4">
    <selfCollide>false</selfCollide>
  </gazebo>
  <link name="bluerov2/thruster_sitl_4">
    <inertial>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <mass value="0.0001"/>
      <inertia ixx="0.00000002" ixy="0.0" ixz="0.0" iyy="0.00000002" iyz="0.0" izz="0.00000002"/>
    </inertial>
  </link>
  <joint name="bluerov2/thruster_sitl_4_joint" type="revolute">
    <origin rpy="3.1415926 0 0" xyz="0.0025 -0.1105 -0.005"/>
    <axis xyz="1 0 0"/>
    <limit effort="0.0" lower="0.0" upper="0.0" velocity="0.0"/>
    <parent link="base_link"/>
    <child link="bluerov2/thruster_sitl_4"/>
  </joint>
  <gazebo reference="bluerov2/thruster_sitl_4">
    <selfCollide>false</selfCollide>
  </gazebo>
  <!--
    Dummy link as place holder for the thruster frame,
    since thrusters can often be inside the collision geometry
    of the vehicle and may cause internal collisions if set otherwise
    -->
  <link name="bluerov2/thruster_5">
    <visual>
      <geometry>
        <mesh filename="file:///home/nyuad/NYUAD-ROV-Capstone-Repo/src/bluerov2_sim/bluerov2_description/meshes/bluerov2_propcw.dae" scale="1 1 1"/>
      </geometry>
    </visual>
    <inertial>
      <mass value="0.010"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertia ixx="0.000000017" ixy="0.0" ixz="0.0" iyy="0.000000017" iyz="0.0" izz="0.000000017"/>
    </inertial>
  </link>
  <!-- Joint between thruster link and vehicle base link -->
  <joint name="bluerov2/thruster_5_joint" type="continuous">
    <origin rpy="0 -1.5707963268 0" xyz="0.0025 0.1105 -0.005"/>
    <axis xyz="1 0 0"/>
    <parent link="base_link"/>
    <child link="bluerov2/thruster_5"/>
  </joint>
  <!-- From desistek underwater vehicle -->
  <gazebo>
    <!-- Thruster ROS plugin -->
    <plugin filename="libuuv_thruster_ros_plugin.so" name="bluerov2_5_thruster_model">
      <!-- Name of the thruster link -->
      <linkName>bluerov2/thruster_5</linkName>
      <!-- Name of the joint between thruster and vehicle base link -->
      <jointName>bluerov2/thruster_5_joint</jointName>
      <!-- Make the thruster aware of its id -->
      <thrusterID>5</thrusterID>
      <!-- Gain of the input command signal -->
      <gain>1</gain>
      <!-- Maximum allowed input value for the input signal for thruster unit -->
      <!-- <clampMax>0</clampMax> -->
      <!-- Minimum allowed value for the input signal for thruster unit -->
      <!-- <clampMin>0</clampMin> -->
      <!-- Minimum and maximum thrust force output allowed -->
      <!-- <thrustMin>0</thrustMin> -->
      <!-- <thrustMax>200</thrustMax> -->
      <!--
       Value from 0 to 1 to set the efficiency of the output thrust force
       Default value is 1.0
       -->
      <thrust_efficiency>1</thrust_efficiency>
      <!--
       Value from 0 to 1 to set the efficiency of the propeller as a factor
       to be multiplied to the current value of the state variable at each
       iteration.
       Default value is 1.0
       -->
      <propeller_efficiency>1</propeller_efficiency>
      <!-- 2) First order model -->
      <dynamics>
        <type>FirstOrder</type>
        <timeConstant>0.2</timeConstant>
      </dynamics>
      <conversion>
        <type>Basic</type>
        <rotorConstant>0.0001</rotorConstant>
        <!-- <rotorConstant>0</rotorConstant> -->
      </conversion>
    </plugin>
  </gazebo>
  <gazebo reference="bluerov2/thruster_5">
    <selfCollide>false</selfCollide>
  </gazebo>
  <link name="bluerov2/thruster_sitl_5">
    <inertial>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <mass value="0.0001"/>
      <inertia ixx="0.00000002" ixy="0.0" ixz="0.0" iyy="0.00000002" iyz="0.0" izz="0.00000002"/>
    </inertial>
  </link>
  <joint name="bluerov2/thruster_sitl_5_joint" type="revolute">
    <origin rpy="3.1415926 0 0" xyz="0.0025 0.1105 -0.005"/>
    <axis xyz="1 0 0"/>
    <limit effort="0.0" lower="0.0" upper="0.0" velocity="0.0"/>
    <parent link="base_link"/>
    <child link="bluerov2/thruster_sitl_5"/>
  </joint>
  <gazebo reference="bluerov2/thruster_sitl_5">
    <selfCollide>false</selfCollide>
  </gazebo>
  <!--
    Some examples of sensors that can be added to the vehicle frame.
    Set the origin of the sensor frames correctly for your application
    Look into the sensor macros in the package uuv_sensor_ros_plugins/urdf for
    more examples or add you own custom sensor units.
  -->
  <!-- Mount a 3D pose sensor -->
  <link name="bluerov2/pose_sensor_link_default">
    <inertial>
      <inertia ixx="0.00001" ixy="0.0" ixz="0.0" iyy="0.00001" iyz="0.0" izz="0.00001"/>
      <mass value="0.001"/>
      <!-- [kg] -->
      <origin rpy="0 0 0" xyz="0 0 0"/>
    </inertial>
  </link>
  <joint name="bluerov2/pose_sensor_default_joint" type="revolute">
    <origin rpy="0 0 0" xyz="0 0 0"/>
    <axis xyz="0 0 1"/>
    <parent link="base_link"/>
    <child link="bluerov2/pose_sensor_link_default"/>
    <limit effort="0" lower="0" upper="0" velocity="0"/>
  </joint>
  <gazebo>
    <plugin filename="libuuv_gazebo_ros_pose_gt_plugin.so" name="pose_3d_plugin">
      <robot_namespace>bluerov2</robot_namespace>
      <link_name>base_link</link_name>
      <sensor_topic>pose_gt</sensor_topic>
      <static_reference_frame>world</static_reference_frame>
      <noise_sigma>0.0</noise_sigma>
      <noise_amplitude>0.0</noise_amplitude>
      <update_rate>20</update_rate>
      <enable_gazebo_messages>false</enable_gazebo_messages>
      <publish_ned_odom>False</publish_ned_odom>
    </plugin>
  </gazebo>
  <!-- IMU link -->
  <link name="bluerov2/imu_link">
    <inertial>
      <inertia ixx="0.00001" ixy="0.0" ixz="0.0" iyy="0.00001" iyz="0.0" izz="0.00001"/>
      <mass value="0.015"/>
      <!-- [kg] -->
      <origin rpy="0 0 0" xyz="0 0 0"/>
    </inertial>
  </link>
  <!-- IMU joint -->
  <joint name="bluerov2/imu_joint" type="revolute">
    <origin rpy="0 0 0" xyz="0 0 0"/>
    <parent link="base_link"/>
    <child link="bluerov2/imu_link"/>
    <limit effort="0" lower="0" upper="0" velocity="0"/>
    <axis xyz="1 0 0"/>
  </joint>
  <gazebo>
    <plugin filename="libuuv_gazebo_ros_imu_plugin.so" name="libuuv_gazebo_imu_plugin">
      <!-- A good description of the IMU parameters can be found in the kalibr documentation:
           https://github.com/ethz-asl/kalibr/wiki/IMU-Noise-Model-and-Intrinsics -->
      <robot_namespace>bluerov2</robot_namespace>
      <!-- (string, required): ros namespace in which the messages are published -->
      <link_name>bluerov2/imu_link</link_name>
      <!-- (string, required): name of the body which holds the IMU sensor -->
      <sensor_topic>imu</sensor_topic>
      <!-- (string): name of the sensor output topic and prefix of service names (defaults to imu) -->
      <gyroscope_noise_density>0.0003394</gyroscope_noise_density>
      <!-- Gyroscope noise density (two-sided spectrum) [rad/s/sqrt(Hz)] -->
      <gyroscope_random_walk>3.8785e-05</gyroscope_random_walk>
      <!-- Gyroscope bias random walk [rad/s/s/sqrt(Hz)] -->
      <gyroscope_bias_correlation_time>1000.0</gyroscope_bias_correlation_time>
      <!-- Gyroscope bias correlation time constant [s] -->
      <gyroscope_turn_on_bias_sigma>0.0087</gyroscope_turn_on_bias_sigma>
      <!-- Gyroscope turn on bias standard deviation [rad/s] -->
      <accelerometer_noise_density>0.004</accelerometer_noise_density>
      <!-- Accelerometer noise density (two-sided spectrum) [m/s^2/sqrt(Hz)] -->
      <accelerometer_random_walk>0.006</accelerometer_random_walk>
      <!-- Accelerometer bias random walk. [m/s^2/s/sqrt(Hz)] -->
      <accelerometer_bias_correlation_time>300.0</accelerometer_bias_correlation_time>
      <!-- Accelerometer bias correlation time constant [s] -->
      <accelerometer_turn_on_bias_sigma>0.196</accelerometer_turn_on_bias_sigma>
      <!-- Accelerometer turn on bias standard deviation [m/s^2] -->
      <orientation_noise>0.01</orientation_noise>
      <update_rate>50</update_rate>
      <!-- Update period of accelerometer and gyroscope [s] -->
      <enable_gazebo_messages>false</enable_gazebo_messages>
      <enable_local_ned_frame>False</enable_local_ned_frame>
      <static_reference_frame>world</static_reference_frame>
    </plugin>
  </gazebo>
  <link name="bluerov2/pressure_link">
    <inertial>
      <inertia ixx="0.00001" ixy="0.0" ixz="0.0" iyy="0.00001" iyz="0.0" izz="0.00001"/>
      <mass value="0.015"/>
      <!-- [kg] -->
      <origin rpy="0 0 0" xyz="0 0 0"/>
    </inertial>
    <visual>
      <geometry>
        <mesh filename="file:///opt/ros/melodic/share/uuv_sensor_ros_plugins/meshes/pressure.dae" scale="1 1 1"/>
      </geometry>
    </visual>
    <collision>
      <geometry>
        <cylinder length="1e-06" radius="1e-06"/>
      </geometry>
      <origin rpy="0 1.57079632679 0" xyz="0 0 0"/>
    </collision>
  </link>
  <joint name="bluerov2/pressure_joint" type="revolute">
    <origin rpy="0 0 0" xyz="0 0 0"/>
    <parent link="base_link"/>
    <child link="bluerov2/pressure_link"/>
    <limit effort="0" lower="0" upper="0" velocity="0"/>
    <axis xyz="1 0 0"/>
  </joint>
  <gazebo>
    <plugin filename="libuuv_gazebo_ros_subsea_pressure_plugin.so" name="libuuv_gazebo_subseapressure_plugin">
      <robot_namespace>bluerov2</robot_namespace>
      <!-- (string, required): ros namespace in which the messages are published -->
      <link_name>bluerov2/pressure_link</link_name>
      <!-- (string, required): name of the body which holds the IMU sensor -->
      <sensor_topic>pressure</sensor_topic>
      <!-- (string): name of the sensor output topic and prefix of service names (defaults to imu) -->
      <update_rate>10</update_rate>
      <!-- Update period of accelerometer and gyroscope [s] -->
      <saturation>30000</saturation>
      <!-- measurement range [kPa] -->
      <noise_sigma>3.0</noise_sigma>
      <!-- measurement stddev [kPa] -->
      <noise_amplitude>0.0</noise_amplitude>
      <estimate_depth_on>False</estimate_depth_on>
      <!-- infer depth? -->
      <standard_pressure>101.325</standard_pressure>
      <!-- pressure at sea level (depth 0 m) [kPa] -->
      <kPa_per_meter>9.80638</kPa_per_meter>
      <!-- increase in pressure [kPa] per [m] in increased depth -->
      <enable_gazebo_messages>false</enable_gazebo_messages>
    </plugin>
  </gazebo>
  <!-- Sensor link -->
  <link name="/camera_front_link">
    <inertial>
      <inertia ixx="0.00001" ixy="0.0" ixz="0.0" iyy="0.00001" iyz="0.0" izz="0.00001"/>
      <mass value="0.001"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
    </inertial>
    <visual>
      <geometry>
        <mesh filename="file:///opt/ros/melodic/share/uuv_sensor_ros_plugins/meshes/oe14-372.dae" scale="1.0 1.0 1.0"/>
      </geometry>
    </visual>
    <collision>
      <geometry>
        <cylinder length="1e-06" radius="1e-06"/>
      </geometry>
      <origin rpy="0 1.57079632679 0" xyz="0 0 0"/>
    </collision>
  </link>
  <joint name="/camera_front_joint" type="revolute">
    <origin rpy="0 0 0" xyz="0.2 0 0"/>
    <parent link="base_link"/>
    <child link="/camera_front_link"/>
    <limit effort="0" lower="0" upper="0" velocity="0"/>
    <axis xyz="1 0 0"/>
  </joint>
  <link name="/camera_front_link_optical">
    <inertial>
      <mass value="0.001"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertia ixx="1.666666e-12" ixy="0.0" ixz="0.0" iyy="1.666666e-12" iyz="0.0" izz="1.666666e-12"/>
    </inertial>
    <collision>
      <!-- todo: gazebo needs a collision volume or it will ignore the pose of
           the joint that leads to this link (and assume it to be the identity) -->
      <geometry>
        <cylinder length="0.000001" radius="0.000001"/>
      </geometry>
      <origin rpy="0 1.57079632679 0" xyz="0 0 0"/>
    </collision>
  </link>
  <joint name="/camera_front_optical_joint" type="revolute">
    <origin rpy="-1.57079632679 0 -1.57079632679" xyz="0 0 0"/>
    <parent link="/camera_front_link"/>
    <child link="/camera_front_link_optical"/>
    <limit effort="0" lower="0" upper="0" velocity="0"/>
    <axis xyz="1 0 0"/>
  </joint>
  <gazebo reference="/camera_front_link">
    <sensor name="camera_front" type="camera">
      <update_rate>30</update_rate>
      <camera name="camera_front">
        <horizontal_fov>1.5125</horizontal_fov>
        <image>
          <width>1920</width>
          <height>1080</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.05</near>
          <far>3000</far>
        </clip>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.01</stddev>
        </noise>
      </camera>
      <plugin filename="libgazebo_ros_camera.so" name="camera_front_controller">
        <updateRate>30</updateRate>
        <cameraName>/camera_front</cameraName>
        <frameName>camera_front_link_optical</frameName>
        <attenuationR>0.0</attenuationR>
        <attenuationG>0.0</attenuationG>
        <attenuationB>0.0</attenuationB>
        <backgroundR>0</backgroundR>
        <backgroundG>0</backgroundG>
        <backgroundB>0</backgroundB>
        <!-- required for ros depth cam -->
        <imageTopicName>camera_image</imageTopicName>
        <pointCloudTopicName>camera_cloud</pointCloudTopicName>
        <depthImageTopicName>camera_depth</depthImageTopicName>
        <depthImageCameraInfoTopicName>camera_depth_info</depthImageCameraInfoTopicName>
        <pointCloudCutoff>10.0</pointCloudCutoff>
      </plugin>
    </sensor>
  </gazebo>
  <!-- Sensor link -->
  <link name="/camera_down_link">
    <inertial>
      <inertia ixx="0.00001" ixy="0.0" ixz="0.0" iyy="0.00001" iyz="0.0" izz="0.00001"/>
      <mass value="0.001"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
    </inertial>
    <visual>
      <geometry>
        <mesh filename="file:///opt/ros/melodic/share/uuv_sensor_ros_plugins/meshes/oe14-372.dae" scale="1.0 1.0 1.0"/>
      </geometry>
    </visual>
    <collision>
      <geometry>
        <cylinder length="1e-06" radius="1e-06"/>
      </geometry>
      <origin rpy="0 1.57079632679 0" xyz="0 0 0"/>
    </collision>
  </link>
  <joint name="/camera_down_joint" type="revolute">
    <origin rpy="0 1.57079632679 0" xyz="0 0 -0.2"/>
    <parent link="base_link"/>
    <child link="/camera_down_link"/>
    <limit effort="0" lower="0" upper="0" velocity="0"/>
    <axis xyz="1 0 0"/>
  </joint>
  <link name="/camera_down_link_optical">
    <inertial>
      <mass value="0.001"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertia ixx="1.666666e-12" ixy="0.0" ixz="0.0" iyy="1.666666e-12" iyz="0.0" izz="1.666666e-12"/>
    </inertial>
    <collision>
      <!-- todo: gazebo needs a collision volume or it will ignore the pose of
           the joint that leads to this link (and assume it to be the identity) -->
      <geometry>
        <cylinder length="0.000001" radius="0.000001"/>
      </geometry>
      <origin rpy="0 1.57079632679 0" xyz="0 0 0"/>
    </collision>
  </link>
  <joint name="/camera_down_optical_joint" type="revolute">
    <origin rpy="-1.57079632679 0 -1.57079632679" xyz="0 0 0"/>
    <parent link="/camera_down_link"/>
    <child link="/camera_down_link_optical"/>
    <limit effort="0" lower="0" upper="0" velocity="0"/>
    <axis xyz="1 0 0"/>
  </joint>
  <gazebo reference="/camera_down_link">
    <sensor name="camera_down" type="camera">
      <update_rate>30</update_rate>
      <camera name="camera_down">
        <horizontal_fov>1.5125</horizontal_fov>
        <image>
          <width>1920</width>
          <height>1080</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.05</near>
          <far>3000</far>
        </clip>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.01</stddev>
        </noise>
      </camera>
      <plugin filename="libgazebo_ros_camera.so" name="camera_down_controller">
        <updateRate>30</updateRate>
        <cameraName>/camera_down</cameraName>
        <frameName>camera_down_link_optical</frameName>
        <attenuationR>0.0</attenuationR>
        <attenuationG>0.0</attenuationG>
        <attenuationB>0.0</attenuationB>
        <backgroundR>0</backgroundR>
        <backgroundG>0</backgroundG>
        <backgroundB>0</backgroundB>
        <!-- required for ros depth cam -->
        <imageTopicName>camera_image</imageTopicName>
        <pointCloudTopicName>camera_cloud</pointCloudTopicName>
        <depthImageTopicName>camera_depth</depthImageTopicName>
        <depthImageCameraInfoTopicName>camera_depth_info</depthImageCameraInfoTopicName>
        <pointCloudCutoff>10.0</pointCloudCutoff>
      </plugin>
    </sensor>
  </gazebo>
  <!-- GPS link -->
  <link name="bluerov2/gps_link">
    <inertial>
      <inertia ixx="0.00001" ixy="0.0" ixz="0.0" iyy="0.00001" iyz="0.0" izz="0.00001"/>
      <mass value="0.001"/>
      <!-- [kg] -->
      <origin rpy="0 0 0" xyz="0 0 0"/>
    </inertial>
  </link>
  <!-- GPS joint -->
  <joint name="bluerov2/gps_joint" type="revolute">
    <origin rpy="0 0 0" xyz="0 0 0"/>
    <parent link="base_link"/>
    <child link="bluerov2/gps_link"/>
    <axis xyz="1 0 0"/>
    <limit effort="0" lower="0" upper="0" velocity="0"/>
  </joint>
  <gazebo reference="bluerov2/gps_link">
    <sensor name="bluerov2/gps" type="gps">
      <pose>0 0 0 0 0 0</pose>
      <visualize>0</visualize>
      <always_on>1</always_on>
      <update_rate>30</update_rate>
      <gps>
        <position_sensing>
          <horizontal>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>0.0</stddev>
              <bias_mean>0.0</bias_mean>
              <bias_stddev>0.0</bias_stddev>
            </noise>
          </horizontal>
          <vertical>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>0.0</stddev>
              <bias_mean>0.0</bias_mean>
              <bias_stddev>0.0</bias_stddev>
            </noise>
          </vertical>
        </position_sensing>
        <velocity_sensing>
          <horizontal>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>0.0</stddev>
              <bias_mean>0.0</bias_mean>
              <bias_stddev>0.0</bias_stddev>
            </noise>
          </horizontal>
          <vertical>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>0.0</stddev>
              <bias_mean>0.0</bias_mean>
              <bias_stddev>0.0</bias_stddev>
            </noise>
          </vertical>
        </velocity_sensing>
      </gps>
      <plugin filename="libuuv_gazebo_ros_gps_plugin.so" name="bluerov2_gazebo_gps_ros_plugin">
        <robot_namespace>bluerov2</robot_namespace>
        <sensor_topic>gps</sensor_topic>
        <horizontal_pos_std_dev>0.0</horizontal_pos_std_dev>
        <vertical_pos_std_dev>0.0</vertical_pos_std_dev>
        <update_rate>30</update_rate>
        <is_on>true</is_on>
        <enable_gazebo_messages>true</enable_gazebo_messages>
      </plugin>
    </sensor>
  </gazebo>
  <link name="bluerov2/ping360_sonar_link">
    <inertial>
      <mass value="0.00001"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertia ixx="0.01" ixy="0.001" ixz="0.001" iyy="0.01" iyz="0.001" izz="0.01"/>
    </inertial>
    <visual name="visual">
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <cylinder length="0.083" radius="0.0385"/>
      </geometry>
    </visual>
    <collision>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <box size="0.1 0.1 0.1"/>
      </geometry>
    </collision>
  </link>
  <joint name="bluerov2/ping360_sonar_joint" type="revolute">
    <origin rpy="0 0 0" xyz="0.15 0.1 0.1"/>
    <axis xyz="0 0 1"/>
    <parent link="base_link"/>
    <child link="bluerov2/ping360_sonar_link"/>
    <limit effort="0" lower="0" upper="0" velocity="0"/>
  </joint>
  <link name="bluerov2/ping360_depth_link">
    <inertial>
      <mass value="0.0001"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertia ixx="0.0001" ixy="0.0001" ixz="0.0001" iyy="0.0001" iyz="0.0001" izz="0.0001"/>
    </inertial>
  </link>
  <joint name="bluerov2/ping360_depth_joint" type="revolute">
    <origin rpy="-1.57079632679 0 -1.57079632679" xyz="0 0 0"/>
    <axis xyz="0 0 1"/>
    <parent link="bluerov2/ping360_sonar_link"/>
    <child link="bluerov2/ping360_depth_link"/>
    <limit effort="0" lower="0" upper="0" velocity="0"/>
  </joint>
  <gazebo reference="bluerov2/ping360_sonar_link">
    <sensor name="Sonar" type="camera">
      <plugin filename="libForwardLookingSonarGazebo.so" name="FLS">
        <topic>/bluerov2/ping360_sonar</topic>
        <link_reference>bluerov2/ping360_sonar_link</link_reference>
        <horizontal_fov>2.09439510239</horizontal_fov>
        <vfov>0.436332312999</vfov>
        <bin_count>1024</bin_count>
        <beam_count>128</beam_count>
        <image>
          <width>1024</width>
          <height>1024</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.75</near>
          <far>10.0</far>
        </clip>
        <disable_color>True</disable_color>
      </plugin>
    </sensor>
    <sensor name="Depth" type="depth">
      <update_rate>1</update_rate>
      <camera>
        <horizontal_fov>2.09439510239</horizontal_fov>
        <image>
          <width>128</width>
          <!-- Approximately 128 * tan(25/2 deg) / tan(120/2 deg) -->
          <height>16.0</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.75</near>
          <far>10.0</far>
        </clip>
      </camera>
      <plugin filename="libgazebo_ros_openni_kinect.so" name="DepthCamera">
        <baseline>0.25</baseline>
        <!-- Unused -->
        <alwaysOn>true</alwaysOn>
        <updateRate>0.0</updateRate>
        <cameraName>DepthCamera</cameraName>
        <imageTopicName>/bluerov2/ping360_sim_depth/color/image_raw</imageTopicName>
        <cameraInfoTopicName>/bluerov2/ping360_sim_depth/color/camera_info</cameraInfoTopicName>
        <depthImageTopicName>/bluerov2/ping360_sim_depth/depth/image_raw</depthImageTopicName>
        <depthImageCameraInfoTopicName>/bluerov2/ping360_sim_depth/depth/camera_info</depthImageCameraInfoTopicName>
        <pointCloudTopicName>/bluerov2/ping360_sim_depth/depth/points</pointCloudTopicName>
        <frameName>bluerov2/ping360_depth_link</frameName>
        <pointCloudCutoff>0.75</pointCloudCutoff>
        <pointCloudCutoffMax>10.0</pointCloudCutoffMax>
      </plugin>
    </sensor>
  </gazebo>
  <link name="bluerov2/mbe_sonar_link">
    <inertial>
      <!-- <mass value="0.78" /> -->
      <mass value="0.00001"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertia ixx="0.01" ixy="0.001" ixz="0.001" iyy="0.01" iyz="0.001" izz="0.01"/>
    </inertial>
    <visual name="visual_cylinder">
      <origin rpy="0 0 0" xyz="0.044 0 0"/>
      <geometry>
        <cylinder length="0.0423" radius="0.05"/>
      </geometry>
      <material name="mbe_material">
        <ambient>0.3 0.6 0.1 1</ambient>
        <diffuse>0.6 0.6 0.6 1</diffuse>
        <specular>0.2 0.2 0.2 0</specular>
        <emissive>0 0 0 1</emissive>
      </material>
    </visual>
    <visual name="visual_box">
      <origin rpy="0 0 0" xyz="-0.011 0 0"/>
      <geometry>
        <box size="0.11 0.1 0.0423"/>
      </geometry>
    </visual>
    <collision>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <box size="0.1 0.1 0.1"/>
      </geometry>
    </collision>
  </link>
  <joint name="bluerov2/mbe_sonar_joint" type="revolute">
    <origin rpy="0 0.174533 0" xyz="0.15 -0.1 0.1"/>
    <axis xyz="0 0 1"/>
    <parent link="base_link"/>
    <child link="bluerov2/mbe_sonar_link"/>
    <limit effort="0" lower="0" upper="0" velocity="0"/>
  </joint>
  <gazebo reference="bluerov2/mbe_sonar_link">
    <sensor name="Sonar" type="camera">
      <plugin filename="libForwardLookingSonarGazebo.so" name="FLS">
        <topic>/bluerov2/mbe_sonar</topic>
        <link_reference>bluerov2/mbe_sonar_link</link_reference>
        <horizontal_fov>1.57079632679</horizontal_fov>
        <vfov>0.349065850399</vfov>
        <bin_count>1024</bin_count>
        <beam_count>256</beam_count>
        <image>
          <width>1024</width>
          <height>1024</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.3</near>
          <far>10.0</far>
        </clip>
        <disable_color>True</disable_color>
      </plugin>
    </sensor>
  </gazebo>
  <link name="bluerov2/ping2_link">
    <inertial>
      <mass value="0.00001"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertia ixx="0.01" ixy="0.001" ixz="0.001" iyy="0.01" iyz="0.001" izz="0.01"/>
    </inertial>
    <visual name="visual">
      <origin rpy="0 1.57079632679 0" xyz="0 0 0"/>
      <geometry>
        <cylinder length="0.041" radius="0.025"/>
      </geometry>
    </visual>
    <collision>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <box size="0.1 0.1 0.1"/>
      </geometry>
    </collision>
  </link>
  <joint name="bluerov2/ping2_joint" type="revolute">
    <origin rpy="0 1.57079632679 0" xyz="0 0.2 0.05"/>
    <axis xyz="0 0 1"/>
    <parent link="base_link"/>
    <child link="bluerov2/ping2_link"/>
    <limit effort="0" lower="0" upper="0" velocity="0"/>
  </joint>
  <gazebo reference="bluerov2/ping2_link">
    <sensor name="Altimeter" type="ray">
      <visualize>True</visualize>
      <update_rate>5</update_rate>
      <ray>
        <scan>
          <horizontal>
            <samples>1</samples>
            <resolution>1</resolution>
            <min_angle>0.0</min_angle>
            <max_angle>0.0</max_angle>
          </horizontal>
        </scan>
        <range>
          <min>0.3</min>
          <max>50</max>
          <resolution>0.01</resolution>
        </range>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.05</stddev>
        </noise>
      </ray>
      <plugin filename="libgazebo_ros_laser.so" name="Altimeter">
        <topicName>/bluerov2/ping2_ray</topicName>
        <frameName>bluerov2/ping2_link</frameName>
      </plugin>
    </sensor>
  </gazebo>
  <gazebo>
    <!-- https://github.com/patrickelectric/bluerov_ros_playground/blob/75c6adb3ddace7bf2e696f2f5cd4651cc91b26fb/model/BlueRov2/BlueRov2.sdf -->
    <plugin filename="libArduPilotPlugin.so" name="ArduPilotPlugin">
      <fdm_addr>127.0.0.1</fdm_addr>
      <fdm_port_in>9002</fdm_port_in>
      <fdm_port_out>9003</fdm_port_out>
      <imuName>bluerov2::base_link::imu_sensor</imuName>
      <connectionTimeoutMaxCount>10</connectionTimeoutMaxCount>
      <!-- <lockstep>true</lockstep>   -->
      <!--
          Require by APM :
          Only change model and gazebo from XYZ to XY-Z coordinates
         -->
      <!-- <modelXYZToAirplaneXForwardZDown>0 0 0 3.141593 0 0</modelXYZToAirplaneXForwardZDown>
        <gazeboXYZToNED>0 0 0 3.141593 0 0</gazeboXYZToNED> -->
      <!--
            incoming control command [0, 1]
            so offset it by -0.5 to get [-0.5, 0.5].
            multiplier = 50
            Positive thrust = 51
            Negative thrust = -41
        -->
      <control channel="0">
        <type>EFFORT</type>
        <offset>-0.5</offset>
        <p_gain>1</p_gain>
        <i_gain>0</i_gain>
        <d_gain>0</d_gain>
        <i_max>0</i_max>
        <i_min>0</i_min>
        <cmd_max>51</cmd_max>
        <cmd_min>-40</cmd_min>
        <linkName>bluerov2/thruster_sitl_0</linkName>
        <jointName>bluerov2/thruster_sitl_0_joint</jointName>
        <multiplier>50</multiplier>
      </control>
      <control channel="1">
        <type>EFFORT</type>
        <offset>-0.5</offset>
        <p_gain>1</p_gain>
        <i_gain>0</i_gain>
        <d_gain>0</d_gain>
        <i_max>0</i_max>
        <i_min>0</i_min>
        <cmd_max>51</cmd_max>
        <cmd_min>-40</cmd_min>
        <linkName>bluerov2/thruster_sitl_1</linkName>
        <jointName>bluerov2/thruster_sitl_1_joint</jointName>
        <multiplier>50</multiplier>
      </control>
      <control channel="2">
        <type>EFFORT</type>
        <offset>-0.5</offset>
        <p_gain>1</p_gain>
        <i_gain>0</i_gain>
        <d_gain>0</d_gain>
        <i_max>0</i_max>
        <i_min>0</i_min>
        <cmd_max>51</cmd_max>
        <cmd_min>-40</cmd_min>
        <linkName>bluerov2/thruster_sitl_2</linkName>
        <jointName>bluerov2/thruster_sitl_2_joint</jointName>
        <multiplier>50</multiplier>
      </control>
      <control channel="3">
        <type>EFFORT</type>
        <offset>-0.5</offset>
        <p_gain>1</p_gain>
        <i_gain>0</i_gain>
        <d_gain>0</d_gain>
        <i_max>0</i_max>
        <i_min>0</i_min>
        <cmd_max>51</cmd_max>
        <cmd_min>-40</cmd_min>
        <linkName>bluerov2/thruster_sitl_3</linkName>
        <jointName>bluerov2/thruster_sitl_3_joint</jointName>
        <multiplier>50</multiplier>
      </control>
      <control channel="4">
        <type>EFFORT</type>
        <offset>-0.5</offset>
        <p_gain>1</p_gain>
        <i_gain>0</i_gain>
        <d_gain>0</d_gain>
        <i_max>0</i_max>
        <i_min>0</i_min>
        <cmd_max>51</cmd_max>
        <cmd_min>-40</cmd_min>
        <linkName>bluerov2/thruster_sitl_4</linkName>
        <jointName>bluerov2/thruster_sitl_4_joint</jointName>
        <multiplier>50</multiplier>
      </control>
      <control channel="5">
        <type>EFFORT</type>
        <offset>-0.5</offset>
        <p_gain>1</p_gain>
        <i_gain>0</i_gain>
        <d_gain>0</d_gain>
        <i_max>0</i_max>
        <i_min>0</i_min>
        <cmd_max>51</cmd_max>
        <cmd_min>-40</cmd_min>
        <linkName>bluerov2/thruster_sitl_5</linkName>
        <jointName>bluerov2/thruster_sitl_5_joint</jointName>
        <multiplier>50</multiplier>
      </control>
    </plugin>
  </gazebo>
  <gazebo>
    <plugin filename="libuuv_joint_state_publisher.so" name="uuv_joint_state_publisher">
      <robotNamespace>bluerov2</robotNamespace>
      <updateRate>10</updateRate>
    </plugin>
  </gazebo>
</robot>

