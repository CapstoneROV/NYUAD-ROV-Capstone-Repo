<launch>
  <arg name="db" default="false" />
  <arg name="db_path" default="$(find dummy_robot)/default_warehouse_mongo_db" />
 
  <arg name="debug" default="false" />
  
<!--By default, we won't load or override the robot_description -->
  <arg name="load_robot_description" default="false"/>
  <arg name="use_gui" default="true" />

  <!-- Gazebo specific options -->
  <arg name="gazebo_gui" default="true"/>
  <arg name="paused" default="false"/>
  <!-- By default, use the urdf location provided from the package -->
  <arg name="urdf_path" default="$(find sonar_testing)/urdf/dummy.urdf"/>

  <!-- launch the gazebo simulator and spawn the robot -->
  <include file="$(find dummy_robot)/launch/gazebo.launch" >
    <arg name="paused" value="$(arg paused)"/>
    <arg name="gazebo_gui" value="$(arg gazebo_gui)"/>
    <arg name="urdf_path" value="$(arg urdf_path)"/>
  </include>

<!--pseudo sensor load-->
  <!--rosparam command="load" file="$(find dummy_robot)/config/sensor_manager.yaml" /-->

  <node pkg="tf2_ros" type="static_transform_publisher" name="world_to_map_broadcaster"
        args="0 0 0 0 0 0 world map" />

 <!-- this will be replaced by the odometry read from the slam team -->
  <node pkg="tf2_ros" type="static_transform_publisher" name="virtual_joint_broadcaster_0" 
        args="0 0 2 0 0 0 map base_link" />

   <!-- Launch the MoveIt planning scene updater -->
<!--
  <node name="octomap_server" pkg="octomap_server" type="octomap_server_node" output="screen">
    <remap from="cloud_in" to="/rtabmap/octomap_binary"/>
  </node>
-->
  <!--node name="update_moveit_planning_scene" pkg="fake_sensor_py" type="update_moveit_planning_scene_old.py" output="screen" /-->

  <rosparam command="load" file="$(find moveit_external_octomap_updater)/example_config_files/sensors_octomap.yaml" />

  <!--rosparam command="load" file="$(find dummy_robot)/config/sensors_3d.yaml" /-->

  <!-- We do not have a robot connected, so publish fake joint states -->
  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" unless="$(arg use_gui)">
    <rosparam param="source_list">[move_group/fake_controller_joint_states]</rosparam>
    <rosparam param="source_list">[/joint_states]</rosparam>
  </node>
  <node name="joint_state_publisher" pkg="joint_state_publisher_gui" type="joint_state_publisher_gui" if="$(arg use_gui)">
    <rosparam param="source_list">[move_group/fake_controller_joint_states]</rosparam>
    <rosparam param="source_list">[/joint_states]</rosparam>
  </node>

  <!-- Given the published joint states, publish tf for the robot links -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="screen" />

  <!-- Run the main MoveIt! executable without trajectory execution (we do not have controllers configured by default) -->
  <include file="$(find dummy_robot)/launch/move_group.launch">
    <arg name="allow_trajectory_execution" value="true"/>
    <arg name="fake_execution" value="false"/>
    <arg name="info" value="true"/>
    <arg name="debug" value="$(arg debug)"/>
    <arg name="load_robot_description" value="$(arg load_robot_description)"/>
  </include>

  <!-- Run Rviz and load the default config to see the state of the move_group node -->
  <include file="$(find dummy_robot)/launch/moveit_rviz.launch">
    <arg name="rviz_config" value="$(find dummy_robot)/launch/moveit.rviz"/>
    <arg name="debug" value="$(arg debug)"/>
  </include>

  <!-- If database loading was enabled, start mongodb as well -->
  <include file="$(find dummy_robot)/launch/default_warehouse_db.launch" if="$(arg db)">
    <arg name="moveit_warehouse_database_path" value="$(arg db_path)"/>
  </include>

</launch>
