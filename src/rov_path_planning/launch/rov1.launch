<launch>
  <!-- Database related arguments -->
  <arg name="db" default="false" />
  <arg name="db_path" default="$(find rov_path_planning)/default_warehouse_mongo_db" />

  <!-- Gazebo and simulation related arguments -->
  <arg name="paused" default="false"/>
  <arg name="gazebo_gui" default="true"/>
  <arg name="urdf_path" default="$(find bluerov2_description)/robots/default.urdf"/>

  <!-- Launch Gazebo and spawn the robot -->
  <include file="$(find rov_path_planning)/launch/gazebo.launch" >
    <arg name="paused" value="$(arg paused)"/>
    <arg name="gazebo_gui" value="$(arg gazebo_gui)"/>
    <arg name="urdf_path" value="$(arg urdf_path)"/>
  </include>

  <!-- Static transform publishers -->
  <node pkg="tf2_ros" type="static_transform_publisher" name="world_to_map_broadcaster"
        args="0 0 0 0 0 0 world map" />
  <node pkg="tf2_ros" type="static_transform_publisher" name="virtual_joint_broadcaster_0" 
        args="0 0 1 0 0 0 map bluerov2/base_link" />

  <!-- Joint state publisher for simulations -->
  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" >
    <rosparam param="source_list">[move_group/fake_controller_joint_states]</rosparam>
  </node>

  <!-- Octomap and TF related nodes -->
  <node name="octomap_converter_node" pkg="rov_path_planning" type="octomap_converter" output="screen" />
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="screen" />

  <!-- Load sensor configuration for octomap -->
  <rosparam command="load" file="$(find moveit_external_octomap_updater)/example_config_files/sensors_octomap.yaml" />

  <!-- Launch MongoDB if required -->
  <include file="$(find rov_path_planning)/launch/default_warehouse_db.launch" if="$(arg db)">
    <arg name="moveit_warehouse_database_path" value="$(arg db_path)"/>
  </include>
</launch>
